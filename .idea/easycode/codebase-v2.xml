<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="com.obiscr.chatgpt.settings.EasyCodeState">
    <option name="projectFiles" value="$PROJECT_DIR$/src/main/java/com/hust/itep/aims/controller/calculate/CalculateController.java;/Users/buudinhha/IdeaProjects/TKXDPM.VP.20231-02/src/main/java/com/hust/itep/aims/controller/calculate/CalculateShippingFee_v1.java;/Users/buudinhha/IdeaProjects/TKXDPM.VP.20231-02/src/main/java/com/hust/itep/aims/controller/calculate/ShippingFeeCalculator.java;/Users/buudinhha/IdeaProjects/TKXDPM.VP.20231-02/src/main/java/com/hust/itep/aims/controller/print/ReportManager.java;/Users/buudinhha/IdeaProjects/TKXDPM.VP.20231-02/src/main/java/com/hust/itep/aims/controller/AdminController.java;/Users/buudinhha/IdeaProjects/TKXDPM.VP.20231-02/src/main/java/com/hust/itep/aims/controller/BaseController.java;/Users/buudinhha/IdeaProjects/TKXDPM.VP.20231-02/src/main/java/com/hust/itep/aims/controller/LoginController.java;/Users/buudinhha/IdeaProjects/TKXDPM.VP.20231-02/src/main/java/com/hust/itep/aims/controller/PlaceOrderController.java;/Users/buudinhha/IdeaProjects/TKXDPM.VP.20231-02/src/main/java/com/hust/itep/aims/controller/ValidateController.java;/Users/buudinhha/IdeaProjects/TKXDPM.VP.20231-02/src/main/java/com/hust/itep/aims/controller/ViewCartController.java;/Users/buudinhha/IdeaProjects/TKXDPM.VP.20231-02/src/main/java/com/hust/itep/aims/database/ConnectJDBC.java;/Users/buudinhha/IdeaProjects/TKXDPM.VP.20231-02/src/main/java/com/hust/itep/aims/entity/admin/Data.java;/Users/buudinhha/IdeaProjects/TKXDPM.VP.20231-02/src/main/java/com/hust/itep/aims/entity/cart/Cart.java;/Users/buudinhha/IdeaProjects/TKXDPM.VP.20231-02/src/main/java/com/hust/itep/aims/entity/cart/CartMedia.java;/Users/buudinhha/IdeaProjects/TKXDPM.VP.20231-02/src/main/java/com/hust/itep/aims/entity/invoice/Invoice.java;/Users/buudinhha/IdeaProjects/TKXDPM.VP.20231-02/src/main/java/com/hust/itep/aims/entity/media/Book.java;/Users/buudinhha/IdeaProjects/TKXDPM.VP.20231-02/src/main/java/com/hust/itep/aims/entity/media/CdAndLp.java;/Users/buudinhha/IdeaProjects/TKXDPM.VP.20231-02/src/main/java/com/hust/itep/aims/entity/media/Dvd.java;/Users/buudinhha/IdeaProjects/TKXDPM.VP.20231-02/src/main/java/com/hust/itep/aims/entity/media/Media.java;/Users/buudinhha/IdeaProjects/TKXDPM.VP.20231-02/src/main/java/com/hust/itep/aims/entity/order/Order.java;/Users/buudinhha/IdeaProjects/TKXDPM.VP.20231-02/src/main/java/com/hust/itep/aims/entity/order/OrderMedia.java;/Users/buudinhha/IdeaProjects/TKXDPM.VP.20231-02/src/main/java/com/hust/itep/aims/entity/payment/PaymentTransaction.java;/Users/buudinhha/IdeaProjects/TKXDPM.VP.20231-02/src/main/java/com/hust/itep/aims/entity/payment/VnPay.java;/Users/buudinhha/IdeaProjects/TKXDPM.VP.20231-02/src/main/java/com/hust/itep/aims/entity/print/FieldReportPayment.java;/Users/buudinhha/IdeaProjects/TKXDPM.VP.20231-02/src/main/java/com/hust/itep/aims/entity/print/ParameterReportPayment.java;/Users/buudinhha/IdeaProjects/TKXDPM.VP.20231-02/src/main/java/com/hust/itep/aims/service/CartService.java;/Users/buudinhha/IdeaProjects/TKXDPM.VP.20231-02/src/main/java/com/hust/itep/aims/service/EventCellInputChange.java;/Users/buudinhha/IdeaProjects/TKXDPM.VP.20231-02/src/main/java/com/hust/itep/aims/service/MediaService.java;/Users/buudinhha/IdeaProjects/TKXDPM.VP.20231-02/src/main/java/com/hust/itep/aims/service/OrderService.java;/Users/buudinhha/IdeaProjects/TKXDPM.VP.20231-02/src/main/java/com/hust/itep/aims/service/PaymentService.java;/Users/buudinhha/IdeaProjects/TKXDPM.VP.20231-02/src/main/java/com/hust/itep/aims/service/QtyCellEditor.java;/Users/buudinhha/IdeaProjects/TKXDPM.VP.20231-02/src/main/java/com/hust/itep/aims/utils/Configs.java;/Users/buudinhha/IdeaProjects/TKXDPM.VP.20231-02/src/main/java/com/hust/itep/aims/utils/Utils.java;/Users/buudinhha/IdeaProjects/TKXDPM.VP.20231-02/src/main/java/com/hust/itep/aims/view/cart/CartScreenHandler.java;/Users/buudinhha/IdeaProjects/TKXDPM.VP.20231-02/src/main/java/com/hust/itep/aims/view/cart/MediaHandler.java;/Users/buudinhha/IdeaProjects/TKXDPM.VP.20231-02/src/main/java/com/hust/itep/aims/view/delivery/DeliveryFormHandler.java;/Users/buudinhha/IdeaProjects/TKXDPM.VP.20231-02/src/main/java/com/hust/itep/aims/view/invoice/InvoiceScreenHandler.java;/Users/buudinhha/IdeaProjects/TKXDPM.VP.20231-02/src/main/java/com/hust/itep/aims/view/BaseScreenHandler.java;/Users/buudinhha/IdeaProjects/TKXDPM.VP.20231-02/src/main/java/com/hust/itep/aims/view/FXMLScreenHandler.java;/Users/buudinhha/IdeaProjects/TKXDPM.VP.20231-02/src/main/java/com/hust/itep/aims/App.java;/Users/buudinhha/IdeaProjects/TKXDPM.VP.20231-02/src/main/java/com/hust/itep/aims/App1.java;/Users/buudinhha/IdeaProjects/TKXDPM.VP.20231-02/src/main/java/com/hust/itep/aims/HelloApplication.java;/Users/buudinhha/IdeaProjects/TKXDPM.VP.20231-02/src/main/java/com/hust/itep/aims/Test.java;/Users/buudinhha/IdeaProjects/TKXDPM.VP.20231-02/src/main/java/module-info.java;/Users/buudinhha/IdeaProjects/TKXDPM.VP.20231-02/src/test/java/com/hust/itep/aims/controller/HomeControllerTest.java;/Users/buudinhha/IdeaProjects/TKXDPM.VP.20231-02/src/test/java/com/hust/itep/aims/controller/ValidateControllerTest.java;/Users/buudinhha/IdeaProjects/TKXDPM.VP.20231-02/src/test/java/com/hust/itep/aims/entity/cart/CartTest.java;/Users/buudinhha/IdeaProjects/TKXDPM.VP.20231-02/src/test/java/com/hust/itep/aims/entity/media/MediaTest.java;/Users/buudinhha/IdeaProjects/TKXDPM.VP.20231-02/src/test/java/com/hust/itep/aims/service/MediaServiceTest.java;/Users/buudinhha/IdeaProjects/TKXDPM.VP.20231-02/pom.xml;/Users/buudinhha/IdeaProjects/TKXDPM.VP.20231-02/README.md" />
    <option name="forceFullIndex" value="false" />
    <option name="fileSummaryMaps" value="{&quot;/Users/buudinhha/IdeaProjects/TKXDPM.VP.20231-02&quot;:&quot;{\&quot;/src/main/java/com/hust/itep/aims/service/OrderService.java\&quot;:\&quot;This Java file defines an OrderService class that provides services related to orders.\\n\\nThe key things it does:\\n\\n1. It has a private List field lstOrderMedia to store order media objects.\\n\\n2. It has a getAmount() method that calculates the total amount for an order. It iterates through the lstOrderMedia list, sums the prices of all OrderMedia objects, and calculates the VAT amount based on the Configs.PERCENT_VAT constant. It returns the total amount as an integer. \\n\\nSo in summary:\\n\\n- It stores order line items \\n- It calculates the total order amount including VAT\\n- The main function is getAmount() to retrieve the total order value\\n\\nSo this class provides the core logic for calculating order totals programmatically by summing the prices and applying VAT. The lstOrderMedia field holds the order details it uses for the calculation.\&quot;,\&quot;/src/main/java/com/hust/itep/aims/controller/AdminController.java\&quot;:\&quot;This Java file is a controller class for the admin dashboard in a media inventory management system.\\n\\nKey functions:\\n\\n- Handles button clicks and form submissions for adding, updating, deleting media items\\n- Connects to the database using JDBC to perform CRUD operations\\n- Populates combo boxes for category and rush order support dropdowns  \\n- Imports images and saves file paths to database\\n- Displays media data in a TableView by mapping columns to entity properties\\n- Provides methods to clear form fields, select rows, merge query results\\n- Logs users out and switches back to the login screen\\n- Displays the logged in username at the top\\n- Initializes component values and event handlers on load\\n\\nIn summary, it controls the admin UI functionality for managing the media item catalog. The main responsibilities are interfacing with the database, populating/updating the TableView, and handling form submissions and navigation between screens.\&quot;,\&quot;/src/main/java/com/hust/itep/aims/entity/print/FieldReportPayment.java\&quot;:\&quot;This Java file defines an entity class called FieldReportPayment that represents a payment for a field report.\\n\\nKey things:\\n\\n- It defines fields to store the category, price, title and quantity of the payment.\\n\\n- It has a constructor that initializes all the fields. \\n\\n- It has a default no-arg constructor for object creation.\\n\\nKey functions:\\n\\n- Getters and setters (not shown) to access and update the field values.\\n\\n- The constructor allows initializing a FieldReportPayment object with the required details.\\n\\n- The fields store the key information needed to represent a payment for a field report - category, price, title and quantity. \\n\\n- This class is likely used to represent payment objects in a collection or database for field report payments. The fields capture the necessary data to describe each payment.\\n\\nSo in summary, it defines an entity class to represent a field report payment with properties to store relevant details, and constructors to initialize objects of this class.\&quot;,\&quot;/src/main/java/com/hust/itep/aims/entity/media/Media.java\&quot;:\&quot;This Java file defines the Media entity class.\\n\\nKey functions:\\n\\n- Defines fields to represent properties of a media item like id, title, price, category, etc.\\n\\n- Getter methods to retrieve the property values.\\n\\n- Different constructors to initialize a Media object with different sets of required properties.\\n\\n- toTableRow method to convert a Media object to an array of values that can be displayed in a table row. This formats some values like price and quantity for display. \\n\\n- Default constructor with no parameters.\\n\\n- Constructor that initializes the object with id, title, price, category, quantity. \\n\\n- Constructor that initializes all fields of the object.\\n\\nSo in summary, this class defines the data model/entity for media items, with properties and methods to work with media objects in the application. The different constructors allow initializing media objects in different ways as needed. The toTableRow method helps display media details in a table format.\&quot;,\&quot;/src/main/java/com/hust/itep/aims/entity/media/Book.java\&quot;:\&quot;This Java file defines a Book class that represents a book entity. It extends the Media class.\\n\\nKey things:\\n\\n- It defines additional book-specific fields like authors, publisher, publication date, pages, etc.\\n\\n- It has a constructor that initializes the book fields as well as calls the parent Media constructor. \\n\\n- It has getter and setter methods for each book field to allow accessing and modifying the field values.\\n\\n- The Book class represents a specific book item with attributes like authors, publisher details, publication date etc in addition to generic media attributes like title, description etc inherited from the Media class.\\n\\n- It allows the creation of Book objects that can hold book data and provides access to that data via the getter/setter methods.\\n\\nSo in summary, this class defines the Book entity/object with its attributes and allows creating, accessing and updating Book instances in the application.\&quot;,\&quot;/src/main/java/com/hust/itep/aims/view/invoice/InvoiceScreenHandler.java\&quot;:\&quot;This Java file defines a screen handler class for the invoice screen in a media ordering application.\\n\\nKey functions:\\n\\n- It extends BaseScreenHandler to handle common screen functionality\\n- It loads the invoice screen FXML layout and initializes UI elements like labels\\n- It has a constructor that takes the stage and screen path\\n- It has fields to store the invoice object and UI element references  \\n- It has commented out code to populate the UI elements with invoice data like customer name, address, totals\\n- It loops through the order\\u0027s media items to display them on the screen\\n- It has a commented out confirmInvoice method that would open the payment screen\\n\\nSo in summary, this class is responsible for:\\n\\n- Loading and displaying the invoice screen UI\\n- Populating the UI with invoice data \\n- Handling interactions like confirming the invoice\\n- Acting as a bridge between the invoice data and invoice screen UI\\n\\nIt allows invoice data to be displayed on the screen and handles user interactions with the invoice.\&quot;,\&quot;/src/main/java/com/hust/itep/aims/view/cart/MediaHandler.java\&quot;:\&quot;This Java file defines a MediaHandler class that handles displaying and interacting with a single media item (e.g. a product) in a shopping cart.\\n\\nKey functions:\\n\\n- Displays media information like title, price, image by setting fields in the FXML UI\\n- Initializes and adds a spinner UI element to adjust the quantity \\n- Handles spinner value changes to update cart item quantity, price, out of stock label\\n- Initializes and adds a delete button to remove the item from the cart\\n- Receives a CartMedia object and sets the media info fields\\n- Formats prices and images for display\\n- Notifies the parent CartScreenHandler when values change to update totals\\n\\nSo in summary, it is responsible for displaying a single cart item, allowing quantity adjustment via a spinner, and deleting the item. It interfaces with the CartMedia model and notifies the parent cart screen controller when values change.\&quot;,\&quot;/src/main/java/module-info.java\&quot;:\&quot;This module-info.java file defines a Java module for the com.hust.itep.aims application.\\n\\nKey functions:\\n\\n- Defines the module name as com.hust.itep.aims\\n- Requires (imports) other modules that this module depends on like javafx, java.sql, etc. \\n- Opens packages to allow FXML controllers/views to access classes in those packages\\n- Exports packages so that classes in the exported packages can be accessed by other modules\\n- Defines the root package (com.hust.itep.aims) that contains the main application classes\\n\\nIn summary, it:\\n\\n1. Defines the module and its dependencies\\n2. Configures package access for FXML/view classes  \\n3. Exports packages for external/other module access\\n\\nThis allows the application to be compiled and run as a modular Java application by defining its module structure and dependencies.\&quot;,\&quot;/src/main/java/com/hust/itep/aims/App.java\&quot;:\&quot;This file is the main entry point for the JavaFX application.\\n\\nKey functions:\\n\\n- It extends the Application class which is required for all JavaFX applications.\\n\\n- Overrides the start() method which is called by the launch() method to start the application. \\n\\n- Initializes an InvoiceScreenHandler passing in the primary stage and screen path.\\n\\n- Calls the show() method on the InvoiceScreenHandler to display the invoice screen.\\n\\n- Catches any exceptions thrown during startup and prints the stack trace. \\n\\n- It is setting up the initial screen to be the invoice screen by creating an InvoiceScreenHandler and calling show() on it.\\n\\n- The main() method is commented out. For JavaFX applications, the launch() method is called instead of main() to start the application thread.\\n\\nSo in summary, it is the entry point class that initializes the primary stage, loads the initial invoice screen, and handles any exceptions during startup of the JavaFX application.\&quot;,\&quot;/src/main/java/com/hust/itep/aims/service/MediaService.java\&quot;:\&quot;This Java file defines a MediaService class that provides services for managing media data.\\n\\nThe key functions are:\\n\\n- getAllMedia(): Returns a list of all media objects stored in the service as sample data. It iterates through the list and prints out the details of each media object.\\n\\n- getMediaById(int id): Returns a single media object matching the given ID. It searches the sample data list and returns the matching object. \\n\\n- getQuantity(int id): Returns the quantity field of the media object matching the given ID. It first calls getMediaById() to retrieve the object, then returns its quantity value.\\n\\nSo in summary, it:\\n\\n1. Defines sample media data \\n2. Provides a method to get all media\\n3. Provides a method to get a single media by ID\\n4. Provides a method to get the quantity of a media by ID\\n\\nThe service acts as a data access layer to retrieve and work with media objects.\&quot;,\&quot;/src/test/java/com/hust/itep/aims/controller/ValidateControllerTest.java\&quot;:\&quot;This file contains unit tests for the ValidateController class.\\n\\nThe key things it does:\\n\\n- Imports the necessary JUnit and Mockito classes for testing\\n- Declares a @Mock ValidateController instance that will be injected\\n- Sets up the ValidateController before each test method\\n- Tests the validatePhoneNumber() method with valid/invalid phone numbers\\n- Tests the validateName() method with valid/invalid names  \\n- Tests the validateAddress() method with valid/invalid addresses\\n\\nThe key functions it tests are:\\n\\n- validatePhoneNumber() - Validates a phone number string\\n- validateName() - Validates a name string  \\n- validateAddress() - Validates an address string\\n\\nIt uses JUnit assertions like assertEquals() to verify the validation methods return the expected boolean results for different test input values.\\n\\nSo in summary, it is a test file that contains unit tests for the validation logic in the ValidateController class.\&quot;,\&quot;/src/main/java/com/hust/itep/aims/utils/Configs.java\&quot;:\&quot;This Configs.java file contains configuration constants and static resources for the AIMS (Asset Inventory Management System) project.\\n\\nKey functions:\\n\\n- Defines API endpoint URLs for communicating with the backend API\\n- Defines demo POST request data for transactions \\n- Defines database configuration like name, username, password\\n- Defines currency and VAT percentage \\n- Defines paths to FXML files for different screens/views\\n- Defines image path for static resources\\n- Defines default font\\n- Defines list of Vietnamese provinces\\n\\nIn summary, it centralizes all the hardcoded configuration values and resources needed by the application in one place. This makes the code more organized and avoids duplicating these values throughout the codebase. The static constants can then be easily accessed from anywhere in the project.\\n\\nSo in essence, it acts as a centralized configuration file for the AIMS project.\&quot;,\&quot;/src/main/java/com/hust/itep/aims/service/CartService.java\&quot;:\&quot;This Java file defines a CartService class that provides services related to shopping cart functionality.\\n\\nThe key functions of this class are:\\n\\n- checkAvailabilityOfProduct() - Checks if the quantities of products in the cart are available in stock. Throws an exception if any product quantity exceeds availability.\\n\\n- calSubtotal() - Calculates the subtotal price of all products in the cart by multiplying quantity and price of each product and summing them. \\n\\n- getListMedia() - Gets the list of CartMedia objects representing the products in the cart.\\n\\nSo in summary, this class:\\n\\n1. Provides methods to validate product availability in cart \\n2. Calculate subtotal price of cart\\n3. Exposes the cart contents \\n\\nIt acts as a service layer to encapsulate cart related business logic and operations. The class depends on the Cart entity class to retrieve the current cart contents.\&quot;,\&quot;/src/main/java/com/hust/itep/aims/controller/calculate/CalculateShippingFee_v1.java\&quot;:\&quot;This Java file implements a shipping fee calculator using version 1 of the logic.\\n\\nKey points:\\n\\n- It is in the com.hust.itep.aims.controller.calculate package\\n- It implements the ShippingFeeCalculator interface\\n- It has a calculateShippingFee method that takes an OrderService object as a parameter\\n- To calculate the fee:\\n  - It generates a random number between 0-10\\n  - Calculates that percentage of the order amount\\n  - Returns the fee amount as an int\\n- The fee calculation is a random percentage between 0-10% of the order amount\\n- It is a simple random fee calculator implementation as version 1\\n\\nThe main function is:\\n\\n- calculateShippingFee - Calculates and returns the shipping fee amount based on the order amount passed in. Uses a random percentage logic between 0-10% of the order amount.\\n\\nSo in summary, it provides a version 1 implementation of a shipping fee calculator interface with a simple random percentage fee logic.\&quot;,\&quot;/src/main/java/com/hust/itep/aims/utils/Utils.java\&quot;:\&quot;This Utils.java file contains utility methods that can be reused across the application.\\n\\nKey functions:\\n\\n- getLogger() - Returns a Logger instance for the given class name. This is used for logging.\\n\\n- getCurrencyFormat() - Formats a number to currency format based on the Vietnamese locale. \\n\\n- getToday() - Returns the current date and time as a String in yyyy-MM-dd HH:mm:ss format.\\n\\n- md5() - Encrypts a given String using MD5 hashing algorithm and returns the encrypted String. This can be used for password hashing.\\n\\n- DATE_FORMATER - A SimpleDateFormat instance for formatting dates in yyyy/MM/dd HH:mm:ss format. \\n\\n- Static initialization block - Configures the logging format using System properties.\\n\\nSo in summary, this Utils class contains common utility methods for logging, date/time formatting, number formatting and hashing that can be reused across the application for tasks like logging, formatting output etc. It centralizes common utilities in one place.\&quot;,\&quot;/src/main/java/com/hust/itep/aims/entity/media/Dvd.java\&quot;:\&quot;This Java file defines a Dvd class that represents a DVD media item.\\n\\nIt extends the Media class to inherit common media properties. \\n\\nIt adds the following DVD-specific properties:\\n\\n- dvdType \\n- director\\n- runtime\\n- studio\\n- language\\n- subtitles \\n- releasedDate\\n- filmType\\n\\nIt defines constructors to initialize the object.\\n\\nIt defines getter and setter methods for each property to allow accessing and modifying the property values.\\n\\nKey functions:\\n\\n- Constructors to initialize a Dvd object\\n- Getter and setter methods for each DVD property to access/modify values\\n- Inherits common media properties and functionality from the Media class\\n\\nSo in summary, it defines a Dvd class with DVD-specific properties and methods to represent a DVD item that can be used in a media/library management system.\&quot;,\&quot;/src/main/java/com/hust/itep/aims/view/delivery/DeliveryFormHandler.java\&quot;:\&quot;This Java file is a controller class for a delivery form in a JavaFX application.\\n\\nKey functions:\\n\\n- It contains FXML annotations to inject TextField controls from the form\\u0027s FXML file.\\n\\n- handleSubmitButtonAction() method handles submission of the form data. \\n\\n- It gets the text values from each TextField on submission.\\n\\n- For demonstration, it prints the form data to the console. \\n\\n- In a real application it would likely save/submit the data to a backend service.\\n\\nSo in summary, it:\\n\\n1. Binds the form fields to properties \\n2. Handles submission of the form\\n3. Extracts user input from fields\\n4. Can process/save submitted data\\n\\nIt acts as the controller/handler for user input and submission of the delivery form.\&quot;,\&quot;/src/test/java/com/hust/itep/aims/entity/media/MediaTest.java\&quot;:\&quot;This file contains JUnit tests for the Media entity class.\\n\\nKey things it does:\\n\\n- Defines a MediaTest class to hold the test methods\\n- Has two test methods - mediaTest1() and mediaTest2()\\n  - These create Media objects with different parameters and assert that the getter methods return the expected values\\n- Tests the toString() method by creating a Media, calling toString() and asserting it matches the expected string\\n\\nThe key functions are:\\n\\n- mediaTest1() - Tests creating a Media with setters and asserts values \\n- mediaTest2() - Tests creating a Media with constructor and asserts values\\n- testToString() - Tests the toString() method returns the expected string representation\\n\\nIn summary, it is testing the key functionality of the Media entity class like creating objects, setting/getting values, and toString() representation through a series of JUnit tests.\&quot;,\&quot;/src/main/java/com/hust/itep/aims/controller/calculate/CalculateController.java\&quot;:\&quot;This Java file defines a CalculateController class that is responsible for calculating shipping fees for orders.\\n\\nKey things:\\n\\n- It is in the package com.hust.itep.aims.controller.calculate, indicating it is a controller class for calculating things.\\n\\n- It has a calculateShippingFee method that takes an OrderService object as a parameter. \\n\\n- This method gets the shipping fee by creating a ShippingFeeCalculator object and calling its calculateShippingFee method, passing in the order.\\n\\n- This allows the shipping fee calculation logic to be abstracted out and different implementations (e.g. CalculateShippingFee_v1) to be used without changing the controller.\\n\\n- The controller\\u0027s responsibility is simply to delegate the fee calculation to the appropriate class/method.\\n\\nSo in summary, the key functions of this file are:\\n\\n1. Define a CalculateController class for calculating shipping fees\\n2. Expose a calculateShippingFee method to calculate the fee for a given order \\n3. Abstract out the calculation logic to a separate ShippingFeeCalculator class\\n4. Allow different calculation implementations to be plugged in transparently\&quot;,\&quot;/src/main/java/com/hust/itep/aims/service/QtyCellEditor.java\&quot;:\&quot;This file defines a QtyCellEditor class that extends DefaultCellEditor to provide a cell editor for editing quantity values in a JTable.\\n\\nKey functions:\\n\\n- Constructor initializes the editor component as a JSpinner for entering quantity values. Sets up formatting and minimum/maximum values.\\n\\n- getTableCellEditorComponent() method overrides the superclass method to initialize the editor component for a specific cell. Passes in row/column values and retrieves the Media object. Sets initial value.\\n\\n- getCellEditorValue() returns the current value from the spinner editor. \\n\\n- inputChange() method is called on value change events from the spinner. Checks if the value changed and notifies the EventCellInputChange listener if so.\\n\\n- enable() method starts a thread to delay enabling the spinner editor, likely to avoid issues with immediate editing.\\n\\nSo in summary, it provides a spinner-based cell editor for quantities that handles data conversion, formatting, validation and notifying listeners on value changes.\&quot;,\&quot;/src/main/java/com/hust/itep/aims/entity/payment/PaymentTransaction.java\&quot;:\&quot;This file defines an entity class called PaymentTransaction to represent a payment transaction in the system.\\n\\nKey things:\\n\\n- It defines fields to store attributes of a payment transaction like id, create date, payment date, content, payment method, status etc. \\n\\n- It has a constructor to initialize a PaymentTransaction object.\\n\\n- It has getter and setter methods for each field to allow accessing and updating the field values.\\n\\n- The key functions are:\\n  - Constructor to create a PaymentTransaction object\\n  - Getter and setter methods to access and update field values of a PaymentTransaction object\\n\\n- This class is likely used to represent payment transaction data in the database and allow CRUD operations on payment transactions. Objects of this class will be created, stored, retrieved and updated from the database.\\n\\nSo in summary, it defines a model/entity class to represent a payment transaction with its attributes and provides getter/setter methods to work with payment transaction objects.\&quot;,\&quot;/src/main/java/com/hust/itep/aims/entity/payment/VnPay.java\&quot;:\&quot;This VnPay.java file defines a VnPay class that represents a VnPay payment entity.\\n\\nKey functions:\\n\\n- Constructor that takes in all fields as parameters\\n- Default constructor \\n- Getter and setter methods for each field:\\n  - getPaymentAccountName()\\n  - setPaymentAccountName()\\n  - getGetPaymentAccountNumber() \\n  - setGetPaymentAccountNumber()\\n  - getBank()\\n  - setBank()\\n  - getImageQrUrl()\\n  - setImageQrUrl()\\n\\nThis class is used to encapsulate the data for a VnPay payment account, including the payment account name, account number, bank, and QR code image URL. The getter and setter methods allow accessing and modifying the field values. Instances of this class can then be used to represent specific VnPay payment accounts in the system.\&quot;,\&quot;/src/main/java/com/hust/itep/aims/entity/cart/CartMedia.java\&quot;:\&quot;This Java file defines an entity class called CartMedia to represent a media item in a shopping cart.\\n\\nKey functions:\\n\\n- Constructor to initialize the media, quantity and price when adding to cart\\n- Getters and setters for the media, quantity and price properties\\n- toString method to generate a string representation of the CartMedia object\\n\\nThe purpose of this class is to encapsulate the details of a media item that has been added to a shopping cart, including the media itself, quantity ordered and price. It provides getter/setter methods to retrieve and update these properties. The toString method allows the object to be easily converted to a string for display or logging purposes.\\n\\nOverall this class models the relationship between a media item and a shopping cart, capturing the necessary data for that association and providing access to it via getter/setter methods.\&quot;,\&quot;/src/main/java/com/hust/itep/aims/entity/cart/Cart.java\&quot;:\&quot;This Java file defines the Cart class which represents the shopping cart functionality.\\n\\nKey functions:\\n\\n- getCart() - Static method to get the singleton cart instance.\\n\\n- addCartMedia() - Adds a CartMedia item to the cart. \\n\\n- removeCartMedia() - Removes a CartMedia item from the cart.\\n\\n- getListMedia() - Gets the list of CartMedia items in the cart. \\n\\n- emptyCart() - Empties all items from the cart.\\n\\n- getTotalMedia() - Gets the total quantity of all items in the cart.\\n\\n- calSubtotal() - Calculates the subtotal price of all items in the cart. \\n\\n- checkAvailabilityOfProduct() - Checks if quantities of products in cart are available. Throws exception if not available.\\n\\n- checkMediaInCart() - Checks if a Media item is already in the cart and returns the CartMedia if found.\\n\\nSo in summary, it manages the shopping cart functionality - adding/removing items, calculating totals, checking availability etc. using a singleton instance to represent the user\\u0027s cart.\&quot;,\&quot;/src/main/java/com/hust/itep/aims/App1.java\&quot;:\&quot;This Java file is the main entry point for a JavaFX application.\\n\\nKey functions:\\n\\n- It extends the Application class, which is required for all JavaFX applications.\\n\\n- The start() method is overridden to launch the GUI. It loads the login.fxml layout file using FXMLLoader and sets it as the root for a new Scene.\\n\\n- The stage is configured with the scene and displayed.\\n\\n- The main() method simply calls launch() to start the JavaFX application lifecycle. \\n\\n- It loads the initial login view defined in the login.fxml file when the application launches.\\n\\n- It sets up the primary stage with basic title and scene.\\n\\nSo in summary, it:\\n\\n1. Defines the main class extending Application \\n2. Loads the initial FXML layout file\\n3. Configures and shows the primary stage\\n4. Acts as the entry point for launching the JavaFX application\&quot;,\&quot;/src/main/java/com/hust/itep/aims/entity/print/ParameterReportPayment.java\&quot;:\&quot;This file defines a ParameterReportPayment class that represents the parameters needed to generate a payment report.\\n\\nKey functions:\\n\\n- Getter and setter methods for the staff, customer, total, qrcode and fields properties\\n- Constructor to initialize the properties\\n- Default constructor \\n\\nThe class is used to encapsulate all the data needed to generate a payment report. It contains properties for:\\n\\n- Staff name \\n- Customer name\\n- Total amount\\n- QR code image as an InputStream\\n- List of field details \\n\\nObjects of this class can be passed to the report generation logic, providing all the necessary data in one place to populate and render the report. The getters allow accessing the data, setters allow setting the properties before generating the report.\\n\\nSo in summary, it defines a data transfer object (DTO) for passing payment report generation parameters between components.\&quot;,\&quot;/src/main/java/com/hust/itep/aims/entity/order/Order.java\&quot;:\&quot;This Java file defines an Order class that represents an order entity.\\n\\nKey functions:\\n\\n- Constructor that takes id, shipping fees, subtotal to initialize the object\\n- Default constructor\\n- Getters and setters for id, shipping fees, subtotal properties\\n- getlstOrderMedia() method to retrieve the list of OrderMedia objects associated with the order\\n- getDeliveryInfo() method to retrieve the delivery info HashMap\\n\\nThe Order class is used to represent an order placed by a customer. It contains properties like the order id, shipping fees, subtotal as well as related objects like the list of ordered items (OrderMedia) and delivery address/details. The getters and setters allow accessing and updating the property values.\&quot;,\&quot;/src/test/java/com/hust/itep/aims/service/MediaServiceTest.java\&quot;:\&quot;This file contains unit tests for the MediaService class.\\n\\nThe key things it does:\\n\\n- It is located in src/test/java, indicating it contains test code.\\n\\n- It imports the necessary classes like MediaService and Media that it will test. \\n\\n- It contains 3 test methods:\\n\\n  1. testGetAllMedia() - Tests that getAllMedia returns the correct number of media objects\\n\\n  2. testGetMediaById() - Tests that getMediaById returns the correct media for a valid ID and null for an invalid ID\\n\\n  3. testGetQuantity() - Tests that getQuantity returns the correct quantity for a valid media ID and 0 for an invalid ID\\n\\n- It uses JUnit assertions like assertEquals, assertNotNull, assertNull to verify the behavior of the MediaService methods.\\n\\nSo in summary, it contains unit tests that validate the main functions of the MediaService class - getting all media, getting media by ID, and getting the quantity of a media. The tests help ensure the service behaves as expected.\&quot;,\&quot;/src/main/java/com/hust/itep/aims/controller/ValidateController.java\&quot;:\&quot;This ValidateController class contains validation logic for customer data.\\n\\nThe key functions are:\\n\\n1. validatePhoneNumber() - Validates a phone number string by checking:\\n   - It has 10 digits\\n   - Starts with 0\\n   - Contains only numbers\\n\\n2. validateName() - Validates a name string by checking: \\n   - It is not null, empty or \\\&quot;null\\\&quot;\\n   - Matches a regular expression for names \\n\\n3. validateAddress() - Validates an address string by checking:\\n   - It is not null, empty or \\\&quot;null\\\&quot; \\n   - Matches a regular expression allowing letters, numbers, spaces, commas and hyphens\\n\\nSo in summary, this class centralizes validation logic for common customer attributes like phone number, name and address. The functions check the input strings meet certain criteria to determine if they are valid or not. This helps ensure data quality and integrity.\&quot;,\&quot;/src/main/java/com/hust/itep/aims/view/BaseScreenHandler.java\&quot;:\&quot;This BaseScreenHandler class is an abstract class that defines common functionality for screen handlers in the application.\\n\\nKey functions:\\n\\n- It extends FXMLScreenHandler to load FXML files and initialize UI components.\\n\\n- It stores references to the Stage, Scene, previous screen handler, controller and messages passed between screens.\\n\\n- show() - Displays the screen by setting the scene on the stage.\\n\\n- setScreenTitle() - Sets the title of the stage. \\n\\n- setBController() - Sets the base controller for the screen.\\n\\n- getBController() - Gets the base controller.\\n\\n- forward() - Stores messages passed between screens. \\n\\n- setPreviousScreen() - Sets the previous screen handler. \\n\\n- getPreviousScreen() - Gets the previous screen handler.\\n\\n- It provides a common base for all screen handlers to inherit from, allowing them to load screens, display them in a stage, pass data between screens and reference common controllers and stages. This provides a consistent interface for handling screens and navigation in the application.\\n\\nSo in summary, it defines common functionality and properties for screen handlers to manage loading, displaying and navigating between screens in the application.\&quot;,\&quot;/src/main/java/com/hust/itep/aims/controller/LoginController.java\&quot;:\&quot;This LoginController class handles the login functionality of the application.\\n\\nKey functions:\\n\\n- loginBtn() - Called when the login button is clicked. It validates the username and password and checks the database.\\n\\n- If credentials are valid:\\n  - Sets the global Data.username variable \\n  - Shows success alert\\n  - Loads either the admin or home screen depending on user role\\n\\n- If invalid:\\n  - Shows error alert\\n\\n- Connects to the database using the ConnectJDBC class\\n- Prepares and executes a SQL query to select the user from the database\\n- Checks if result is valid user \\n\\n- Handles displaying different screens after login depending on admin role\\n\\n- Catches any exceptions from database operations\\n\\nSo in summary, it:\\n\\n1. Validates login credentials \\n2. Queries database to check user\\n3. Displays alerts for success/failure\\n4. Loads correct post-login screen\\n5. Manages database connection\&quot;,\&quot;/src/main/java/com/hust/itep/aims/view/FXMLScreenHandler.java\&quot;:\&quot;This FXMLScreenHandler class is used to load and manage FXML screens in a JavaFX application.\\n\\nKey functions:\\n\\n- Constructor that takes a screen path and loads the FXML file using FXMLLoader. It sets this class as the controller.\\n\\n- getContent() method returns the loaded BorderPane root node. \\n\\n- getLoader() method returns the FXMLLoader instance.\\n\\n- setImage() method loads an image from a file path and sets it on an ImageView.\\n\\nThe main purpose of this class is to provide a reusable way to load FXML screens and their controllers. It handles loading the FXML, setting the controller, and provides methods to access the loaded content and loader. The setImage() method also provides a helper to load images for the screens.\\n\\nOverall, this class acts as a handler/manager for loading and working with different FXML screens in the JavaFX application.\&quot;,\&quot;/src/main/java/com/hust/itep/aims/controller/print/ReportManager.java\&quot;:\&quot;This ReportManager class is used to generate and view reports using JasperReports.\\n\\nKey functions:\\n\\n- getInstance() - Singleton method to get the instance of the ReportManager class.\\n\\n- compileReport() - Compiles the JRXML report template file into a compiled JasperReport object.\\n\\n- printReportPayment() - Fills and prints a payment report.\\n\\n  - Accepts a ParameterReportPayment data object containing report parameters and data source.\\n\\n  - Passes parameters and data source to JasperFillManager to fill the report.\\n\\n  - Views the filled JasperPrint report using JasperViewer.\\n\\n- view() - Helper method to view a JasperPrint report.\\n\\nSo in summary, it:\\n\\n1. Compiles the report template \\n2. Fills the report with data/parameters\\n3. Generates the filled report \\n4. Views the report\\n\\nIt provides a simple interface to generate and view reports programmatically using JasperReports.\&quot;,\&quot;/src/main/java/com/hust/itep/aims/controller/PlaceOrderController.java\&quot;:\&quot;This PlaceOrderController class is responsible for handling the order placement process.\\n\\nKey functions:\\n\\n- placeOrder(): Checks availability of products in cart before placing order\\n\\n- createOrder(): Creates an Order object from the items in the cart \\n\\n- createInvoice(): Creates an Invoice object associated with the given Order\\n\\n- validateDeliveryInfo(): Validates the delivery/contact information passed in against validation rules (coincidental cohesion as it\\u0027s not tightly related to order processing)\\n\\nSo in summary, it:\\n\\n1. Checks product availability \\n2. Creates the order object\\n3. Creates the associated invoice\\n4. Validates delivery info\\n\\nThis allows placing an order, generating the associated records, and validating customer details in one place. The functions demonstrate different types of cohesion as well.\&quot;,\&quot;/src/main/java/com/hust/itep/aims/entity/order/OrderMedia.java\&quot;:\&quot;This file defines an OrderMedia entity class that represents the relationship between an order and a media item.\\n\\nKey functions:\\n\\n- Constructor that takes in a Media object, price, and quantity to initialize the fields\\n- Default constructor\\n- Getters and setters for the media, price, and quantity fields\\n\\nThis class is used to link a media item to an order, and store the price and quantity of that media item ordered. It allows an order to have multiple OrderMedia objects to represent different media items ordered with their respective prices and quantities.\\n\\nThe Media class is imported to reference the media item being ordered. Getters and setters allow the fields to be accessed and updated. Constructors initialize a new OrderMedia object.\\n\\nOverall, this entity class models the relationship between an order and the individual media items within that order, along with their prices and quantities.\&quot;,\&quot;/src/main/java/com/hust/itep/aims/view/cart/CartScreenHandler.java\&quot;:\&quot;This CartScreenHandler class handles the cart screen in the AIMS application.\\n\\nKey functions:\\n\\n- Constructor that loads the cart screen FXML and sets up click handlers\\n- getBController() method to access the ViewCartController\\n- requestToViewCart() method to display the cart screen and load cart data\\n- displayCartWithMediaAvailability() method to display each cart item in the UI\\n- updateCartAmount() method to calculate and display subtotals/totals\\n- PlaceOrderBtn click handler to trigger placing an order\\n\\nThe main responsibilities of this class are:\\n\\n- Loading and displaying the cart screen UI\\n- Communicating with the ViewCartController to retrieve cart data \\n- Mapping cart data to UI elements to display the cart items\\n- Calculating order totals and displaying them\\n- Handling the click to place an order\\n\\nSo in summary, it acts as the handler/controller for the cart screen, loading and updating the UI based on cart data from the backend controller.\&quot;,\&quot;/src/main/java/com/hust/itep/aims/entity/invoice/Invoice.java\&quot;:\&quot;This Java file defines an Invoice entity class.\\n\\nKey things:\\n\\n- It defines an Invoice class with fields for id, totalAmount, and associated Order.\\n\\n- It has constructors to initialize the fields in different ways - with all fields, empty, or just with an Order.\\n\\n- Getter and setter methods for each field to allow accessing and updating the field values. \\n\\n- The id field is a BigInteger, totalAmount is an int, and order is an Order object.\\n\\n- It represents a single invoice with an ID, total cost, and associated order details.\\n\\nKey functions:\\n\\n- Constructors to initialize new Invoice objects\\n- Getters and setters for each field \\n- No other methods - it\\u0027s just a POJO (Plain Old Java Object) to represent an invoice entity\\n\\nSo in summary, it defines a basic Invoice entity class with properties and accessors to represent an invoice in the system.\&quot;,\&quot;/src/main/java/com/hust/itep/aims/service/PaymentService.java\&quot;:\&quot;This Java file implements a PaymentService class to handle payments through VNPAY payment gateway.\\n\\nKey functions:\\n\\n- main(): The main method that handles the payment process flow:\\n  - Sets up payment parameters like amount, order info, return URL etc\\n  - Generates signature \\n  - Sends request to VNPAY API\\n  - Reads and prints response\\n\\n- getParamsString(): Converts payment parameters Map to query string \\n\\n- generateVnPaySecureHash(): Generates signature by hashing parameters and secret key\\n\\n- md5(): Calculates MD5 hash of input string \\n\\n- getCurrentDateTime(): Gets current date time in yyyymmddhhmmss format\\n\\nSo in summary, it:\\n\\n1. Sets up payment parameters\\n2. Generates signature \\n3. Makes request to VNPAY API\\n4. Handles response\\n\\nThis allows integrating payments through VNPAY payment gateway programmatically.\&quot;,\&quot;/src/main/java/com/hust/itep/aims/HelloApplication.java\&quot;:\&quot;This Java file defines the main application class for a JavaFX application that connects to a database.\\n\\nKey functions:\\n\\n- Extends Application class to define a JavaFX application\\n- Overrides start() method to load the GUI from an FXML file and display the Stage\\n- Main method launches the application and also contains:\\n  - Database connection code using ConnectJDBC utility class\\n  - Sample SQL query to select from the \\u0027media\\u0027 table\\n  - Prints out results\\n  - Closes connection\\n- Connects to the database using the ConnectJDBC class which handles the connection details  \\n- Executes a simple SQL query to select data\\n- Prints out results\\n- Ensures connection is closed after use\\n\\nSo in summary, it defines the main JavaFX application class, loads the GUI, and also contains sample database connection and query code to demonstrate connecting to and querying the database from the application.\&quot;,\&quot;/src/main/java/com/hust/itep/aims/entity/admin/Data.java\&quot;:\&quot;This Java file defines a Data class that contains static fields to store data related to an admin user.\\n\\nKey things:\\n\\n- It is in the package com.hust.itep.aims.entity.admin, indicating it contains admin entity objects.\\n\\n- Data is a public class with no methods, just static fields. This suggests it is meant to hold global data/state rather than have object instances.\\n\\n- The static fields are:\\n  - username - likely the logged in admin username \\n  - path - possibly the current page/route path\\n  - date - could store a date related to the current session\\n  - id - a unique ID, perhaps for the current admin user\\n\\n- By making the fields static, any code within the same JVM can access and modify these fields without needing an instance of the Data class. \\n\\n- The purpose is to provide a central location to store and access global admin-related data needed across the application, without needing to pass it between classes.\\n\\nSo in summary, it defines a simple data container class with static fields to hold global admin state in a centralized location for easy access by any code within the application.\&quot;,\&quot;/src/main/java/com/hust/itep/aims/entity/media/CdAndLp.java\&quot;:\&quot;This Java file defines a CdAndLp class that represents CDs and LPs (vinyl records) as a type of media item.\\n\\nKey points:\\n\\n- CdAndLp extends the Media class, inheriting common media properties like ID, category, price, etc. \\n\\n- It adds CD/LP-specific properties like artists, record label, track list, publication date, music type.\\n\\n- The constructor initializes these CD/LP properties along with the inherited media properties.\\n\\n- Getter and setter methods are provided for each property to allow retrieving and updating the property values.\\n\\n- This class models the data and behavior of CDs and LPs as a specialized type of media item, with properties relevant to that media type.\\n\\n- Instances of CdAndLp can be created and stored along with other media items, with the additional CD/LP details encapsulated in this class.\\n\\nKey functions:\\n\\n- Constructor to initialize a CdAndLp instance\\n- Getter and setter methods for each property \\n- Inherits common media functions from the Media class\\n\\nSo in summary, it defines a CD/LP entity with relevant properties and allows creating, retrieving and updating instances of that media type.\&quot;,\&quot;/src/main/java/com/hust/itep/aims/Test.java\&quot;:\&quot;This Java file defines a Test class that:\\n\\n1. Initializes the GUI components like JTable, labels, buttons etc. using the initComponents() method.\\n\\n2. Populates the JTable with sample data using the testData() method. It adds Media objects to the table model. \\n\\n3. Implements custom cell editing and rendering for the quantity column of the JTable.\\n\\n4. Calculates the total amount when the quantity is changed using the sumAmount() method. \\n\\n5. Generates a QR code for invoice number using the generateQrcode() method. \\n\\n6. Handles the print button click event to compile the report data and print using the ReportManager class. \\n\\n7. Provides the main() method to launch the GUI frame.\\n\\nSo in summary, it:\\n\\n- Sets up a GUI with a table to display sample data\\n- Implements custom cell editing/rendering \\n- Calculates totals on data change\\n- Generates QR codes\\n- Handles printing of reports using compiled data\\n\\nThe key functions are testData(), sumAmount(), generateQrcode() and jButton1ActionPerformed() to populate, calculate, generate QR and handle printing respectively.\&quot;,\&quot;/src/main/java/com/hust/itep/aims/controller/BaseController.java\&quot;:\&quot;This file defines a BaseController class that provides some common functionality for controllers in the application.\\n\\nKey functions:\\n\\n- checkMediaInCart(Media media) - Checks if a given media item is already in the cart and returns the corresponding CartMedia object if found. This has coincidental cohesion as it doesn\\u0027t really belong to the controller layer.\\n\\n- getListCartMedia() - Gets the list of CartMedia objects currently in the cart. Again this has coincidental cohesion as it is more related to the cart/domain model rather than a controller. \\n\\nSo in summary, this BaseController class provides some cart-related utility methods that multiple controllers may need to use. However, the methods have coincidental cohesion and would be better placed in the cart/domain model classes rather than the controller layer. The class acts as a common place to define these utility functions but could be improved by moving the logic to more appropriate classes.\&quot;,\&quot;/src/test/java/com/hust/itep/aims/entity/cart/CartTest.java\&quot;:\&quot;This Java file contains a test class for testing the Cart entity.\\n\\nKey things:\\n\\n- The package name indicates it is for testing the cart entity in the com.hust.itep.aims.entity.cart package.\\n\\n- It uses JUnit 5 for testing with the @Test annotation.\\n\\n- The class CartTest contains test methods for the Cart class. \\n\\n- There is currently only one empty test method getCart(). This will likely be filled out later to test the getCart() method on the Cart class.\\n\\n- It uses JUnit assertions like assertEquals(), assertNotNull() etc. to validate test outcomes.\\n\\n- Running this test class will execute the test methods and validate the Cart class is working as expected.\\n\\n- The purpose is to test the Cart entity and its methods, like getting a cart instance, adding/removing items, getting total etc. without having to use the actual application code.\\n\\nSo in summary, this file:\\n\\n1. Defines a test class to test the Cart entity \\n2. Contains JUnit test methods \\n3. Validates Cart class methods work as expected\\n4. Allows testing Cart independently without full app\&quot;,\&quot;/src/main/java/com/hust/itep/aims/controller/ViewCartController.java\&quot;:\&quot;This Java file defines a ViewCartController class that handles operations related to viewing the shopping cart.\\n\\nKey functions:\\n\\n- checkAvailabilityOfProduct() - Checks if the products in the cart are still available in stock. This is called by invoking the checkAvailabilityOfProduct() method on the CartService.\\n\\n- getCartSubtotal() - Gets the subtotal price of all items in the cart. This is calculated by calling the calSubtotal() method on CartService and returning the result. \\n\\n- It extends the BaseController class, which likely defines common functionality for controllers.\\n\\n- It has a CartService property that is used to delegate cart-related operations to the CartService class.\\n\\nSo in summary, this controller class provides methods to check product availability and get the cart subtotal by delegating the logic to the CartService class. This separates the controller responsibilities from the business logic in the service class.\&quot;,\&quot;/pom.xml\&quot;:\&quot;This pom.xml file is the project object model file for a Maven Java project. It defines key information and configurations for the project build.\\n\\nSome key functions of this pom.xml file:\\n\\n- Defines the project coordinates like groupId, artifactId, version etc. This identifies the project.\\n\\n- Specifies dependencies on external libraries like JavaFX, JUnit, Mockito etc that the project requires. \\n\\n- Configures the Java compiler plugin to compile the code to Java 9. \\n\\n- Configures the JavaFX maven plugin to allow running the JavaFX application from the command line using \\u0027mvn javafx:run\\u0027. \\n\\n- Specifies the main class of the JavaFX application that will run.\\n\\n- Configures JLink to package the runtime dependencies into a self-contained executable JAR file on build.\\n\\n- Defines the build life cycle and plugins used for tasks like compilation, packaging, testing etc. \\n\\n- Ensures the project is built with UTF-8 encoding.\\n\\nSo in summary, it defines the project metadata, dependencies, plugins, compiler settings and build configuration to allow building, running and packaging the JavaFX application as a Maven project.\&quot;,\&quot;/src/main/java/com/hust/itep/aims/controller/calculate/ShippingFeeCalculator.java\&quot;:\&quot;This file defines an interface for calculating shipping fees for orders.\\n\\nThe key aspects:\\n\\n- Package name indicates it is part of the controller package for calculating things.\\n\\n- Interface name is ShippingFeeCalculator\\n\\n- It defines a single method called calculateShippingFee() that takes an OrderService as a parameter. \\n\\n- The method returns an int, which will presumably be the calculated shipping fee amount.\\n\\nSo in summary:\\n\\n- It defines a common interface for calculating shipping fees\\n- Classes that implement this interface can calculate fees differently \\n- The calculateShippingFee() method takes the necessary order data via the OrderService parameter\\n- It returns the calculated fee amount as an integer\\n\\nThe main purpose is to define a standard way for different shipping fee calculators to be implemented, while keeping the calculation logic decoupled from the rest of the code. Classes that implement this interface can then be injected where needed to calculate shipping fees for orders.\&quot;,\&quot;/src/test/java/com/hust/itep/aims/controller/HomeControllerTest.java\&quot;:\&quot;This Java file contains a unit test for the HomeController class:\\n\\n- It is located in the src/test/java directory, which is the standard location for unit tests in a Maven project.\\n\\n- The package name matches the package of the class being tested (com.hust.itep.aims.controller).\\n\\n- It imports the JUnit Jupiter testing framework classes.\\n\\n- It defines a HomeControllerTest class to hold the test methods. \\n\\n- It has a single test method called getAllMedia():\\n\\n  - It creates an instance of HomeController.\\n\\n  - It calls the getAllMedia() method on the controller.\\n\\n  - It asserts that the return value is not null, testing that the method executes as expected.\\n\\nThe key functions of this test file are:\\n\\n1. To test the getAllMedia() method of the HomeController class\\n2. To do so by creating an instance and calling the method\\n3. To assert the return value meets expectations \\n4. Running this single test case to validate that method\\n\\nSo in summary, it provides a basic unit test for one method of the HomeController class to validate its behavior.\&quot;,\&quot;/README.md\&quot;:\&quot;This README.md file is used to document the progress and work done for the capstone project.\\n\\nKey functions:\\n\\n- Provides information about the team members and their roles\\n- Divides the report into weekly sections to track work done each week\\n- For each team member in each week, documents:\\n  - Tasks assigned\\n  - Pull requests linked to the work\\n  - Implementation details\\n- Allows expanding details to see more information about each team member\\u0027s work\\n- Acts as a log to track progress and contributions over time\\n- Provides links to pull requests for code changes\\n- Gives visibility on tasks completed and any issues encountered\\n\\nIn summary, it acts as a project report/progress tracking file that is updated each week to document the work done, tasks completed, issues faced and pull requests linked to code changes for transparency and reporting purposes. This helps coordinate work within the team and track the overall progress of the capstone project.\&quot;,\&quot;/src/main/java/com/hust/itep/aims/database/ConnectJDBC.java\&quot;:\&quot;This ConnectJDBC class is used to establish a connection to a MySQL database.\\n\\nThe key functions/purpose of this class are:\\n\\n1. It loads database connection properties like URL, username, password from an external db.properties file. This separates the database credentials from the code.\\n\\n2. It uses the DriverManager class to get a Connection object by passing the URL, username and password. This establishes the connection to the database. \\n\\n3. The getConnection() static method returns the Connection object. This can then be used by other classes to execute SQL queries/statements on the database.\\n\\n4. It handles potential SQLException and IOException during connection establishment and returns the connection if successful.\\n\\n5. It provides a simple way for other classes to get a database connection by calling ConnectJDBC.getConnection() without needing to know the underlying connection details.\\n\\nSo in summary, this class abstracts away the database connection logic and provides a single point of access to get a database connection for the application to perform CRUD operations on database tables.\&quot;,\&quot;/src/main/java/com/hust/itep/aims/service/EventCellInputChange.java\&quot;:\&quot;This Java file defines an interface for an event handler that responds to changes in cell input.\\n\\nKey things:\\n\\n- The file is located at src/main/java/com/hust/itep/aims/service, indicating it is part of the service layer of a Java application.\\n\\n- EventCellInputChange is an interface, defining a contract/API but not implementing any behavior. \\n\\n- It contains a single method called inputChanged(). \\n\\n- Any class that implements this interface must provide an implementation of inputChanged().\\n\\n- inputChanged() will be called when the input to a cell changes, allowing any implementing class to react to that change event.\\n\\nSo in summary:\\n\\n- Defines a contract for handling cell input change events \\n- Classes can implement this interface to react to input changes\\n- The sole method inputChanged() must be implemented to provide event handling logic\\n- Allows decoupling event publishing from event handling via this interface\\n\\nSo the key function is to define an event handler for cell input changes in a way that separates the interface from any concrete implementation.\&quot;}&quot;}" />
  </component>
</project>